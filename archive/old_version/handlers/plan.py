# handlers/plan.py
"""
/plan command and activity logging handlers
–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –≤—ã–Ω–µ—Å–µ–Ω –≤ —Å—É—â–Ω–æ—Å—Ç—å Day —Å —Ä–∏—Ç—É–∞–ª–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
"""
import logging
from datetime import date
from dataclasses import dataclass, field
from typing import List
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db import (
    get_user_data,
    get_daily_activity_status,
    log_daily_activity
)
from utils import escape_md, get_sun_times
from data import (
    DEFAULT_PHASE,

    CATEGORY_EMOJI_MAP
)

# –ù–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ä—É—Å.)
CATEGORY_NAMES_MAP = {
    "morning_ritual": "–ú–∞–Ω—Ç—Ä–∞ –í–æ—Å—Ö–æ–¥–∞",
    "water_prayer": "–ú–æ–ª–∏—Ç–≤–∞ –ø–µ—Ä–µ–¥ –≤–æ–¥–æ–π",
    "meal_prayer": "–ú–æ–ª–∏—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤—Ç—Ä–∞–∫–æ–º, –æ–±–µ–¥–æ–º –∏ —É–∂–∏–Ω–æ–º",
    "evening_ritual": "–ú–∞–Ω—Ç—Ä–∞ –ó–∞–∫–∞—Ç–∞",
    "monthly_fast": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–æ—Å—Ç"
}


logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Ç—É–∞–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
ACTIVITY_CATEGORIES = [
    "morning_ritual", 
    "water_prayer", 
    "meal_prayer", 
    "evening_ritual", 
    "monthly_fast"
]

# –¢–µ–∫—Å—Ç—ã —Ä–∏—Ç—É–∞–ª–æ–≤
RITUAL_TEXT = {
    "morning_ritual": "–ú–∞–Ω—Ç—Ä–∞ –í–æ—Å—Ö–æ–¥–∞: \"–†—É—Ö—Å —Ö—É—Ä—ã, —Ä—É—Ö—Å –∑√¶—Ä–¥√¶\"",
    "water_prayer": "–ú–æ–ª–∏—Ç–≤–∞ –ø–µ—Ä–µ–¥ –≤–æ–¥–æ–π: \"–î–æ–Ω ‚Äì —Ñ–∞—Ä–Ω\"",
    "meal_prayer": "–ú–æ–ª–∏—Ç–≤–∞ –ø–µ—Ä–µ–¥ –∑–∞–≤—Ç—Ä–∞–∫–æ–º, –æ–±–µ–¥–æ–º –∏ —É–∂–∏–Ω–æ–º: \"–ó√¶—Ö—Ö—ã —Ñ–∞—Ä–Ω√¶–π —Ü√¶—Ä\"",
    "evening_ritual": "–ú–∞–Ω—Ç—Ä–∞ –∑–∞–∫–∞—Ç–∞: \"–ù—ã—Ö–∞—Å√¶–π –±–∞—Å—Ç, –§–∞—Ä–Ω√¶–π –¥–∑–∞–≥\"",
    "monthly_fast": "–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–æ—Å—Ç: 24 —á —Ç–æ–ª—å–∫–æ –≤–æ–¥–∞ + –º–æ–ª–∏—Ç–≤—ã"
}

@dataclass
class Ritual:
    code: str
    text: str
    emoji: str
    name: str
    done: bool = False

@dataclass
class DayPlan:
    date: date
    rituals: List[Ritual] = field(default_factory=list)

async def handle_plan(message: types.Message) -> None:
    """Handle /plan command: show daily plan with tasks and status."""
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if not user_data:
        await message.answer(
            escape_md("–ù–µ –Ω–∞—à—ë–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."),
            parse_mode="MarkdownV2"
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å–≤–µ—Ç–∞/–∑–∞–∫–∞—Ç–∞
    sun = get_sun_times(
        user_data["lat"], user_data["lon"], user_data["tz"], user_data["city"]
    )
    sunrise = sun.get("sunrise").strftime("%H:%M") if sun.get("sunrise") else "–Ω\/–¥"
    sunset = sun.get("sunset").strftime("%H:%M") if sun.get("sunset") else "–Ω\/–¥"

    # –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤
    status = await get_daily_activity_status(user_id)

    # –°–æ–±–∏—Ä–∞–µ–º DayPlan
    today_plan = DayPlan(date=date.today())
    for code in ACTIVITY_CATEGORIES:
        emoji = {
        "morning_ritual": "üåÑ",
        "water_prayer": "üíß",
        "meal_prayer": "üçΩ",
        "evening_ritual": "üåô",
        "monthly_fast": "‚è≥"
    }.get(code, "üî∏")
        name = CATEGORY_NAMES_MAP.get(code, code)
        done = bool(status.get(code, False))
        text = RITUAL_TEXT.get(code, name)
        today_plan.rituals.append(Ritual(code, text, emoji, name, done))

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    date_str = escape_md(today_plan.date.strftime('%d.%m.%Y'))
    city = escape_md(user_data.get('city', ''))
    leader = escape_md(user_data.get('leader_name', ''))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    plan_lines = []
    plan_lines.append(f"üóìÔ∏è *–ü–ª–∞–Ω –Ω–∞ {date_str}* ‚Äî {city}")
    plan_lines.append(f"üåÖ –í–æ—Å—Ö–æ–¥: `{sunrise}` \\| –ó–∞–∫–∞—Ç: `{sunset}`")
    plan_lines.append("")
    for r in today_plan.rituals:
        # –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–æ—Å—Ç –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        if r.code == 'monthly_fast' and today_plan.date.day != 1:
            continue
        status_emoji = "üü¢" if r.done else "‚ö™Ô∏è"
        plan_lines.append(f"{r.emoji} {status_emoji} {escape_md(r.text)}")
    plan_text = "\n".join(plan_lines)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    buttons = [
        InlineKeyboardButton(
            text=f"{r.emoji} {r.name}",
            callback_data=f"log_activity:{r.code}"
        ) for r in today_plan.rituals if not (r.code == 'monthly_fast' and today_plan.date.day != 1)
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=[buttons])

    await message.answer(
        plan_text,
        reply_markup=markup,
        parse_mode="MarkdownV2"
    )

async def handle_log_activity(callback_query: types.CallbackQuery) -> None:
    """Handle activity logging from inline buttons."""
    cat = callback_query.data.split(":", 1)[1]
    user_id = callback_query.from_user.id
    await log_daily_activity(user_id, cat)
    await callback_query.answer(f"‚úÖ {CATEGORY_NAMES_MAP.get(cat, cat)} –æ—Ç–º–µ—á–µ–Ω–æ!")
    # –ü–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–ª–∞–Ω
    await callback_query.message.delete()
    await handle_plan(callback_query.message)
