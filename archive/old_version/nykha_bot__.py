import logging
import random
import asyncio
import os
import aiosqlite
from datetime import datetime, date, time, timedelta
from dotenv import load_dotenv
from typing import Union, List, Dict, Optional
import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from astral.location import Location # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç astral
from astral.sun import sun
from geopy.geocoders import Nominatim # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
from geopy.extra.rate_limiter import RateLimiter # –î–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Nominatim
from apscheduler.schedulers.asyncio import AsyncIOScheduler # –î–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from config import (
    API_TOKEN, DATABASE_FILE as DB_NAME, DEFAULT_CITY_NAME,
    DEFAULT_LATITUDE, DEFAULT_LONGITUDE, DEFAULT_TIMEZONE, GEOPY_USER_AGENT
)

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command, StateFilter # –î–æ–±–∞–≤–ª—è–µ–º StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ContentType, WebAppInfo # –î–æ–±–∞–≤–ª—è–µ–º ContentType –∏ WebAppInfo
)
from aiogram.exceptions import TelegramAPIError

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

if not API_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.")
if not GEOPY_USER_AGENT:
     logger.warning("GEOPY_USER_AGENT –Ω–µ –∑–∞–¥–∞–Ω –≤ config.py, –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–æ–∫–æ–¥–∏–Ω–≥–æ–º.")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–∫–æ–¥–µ—Ä–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
try:
    logger.info("Astral Geocoder initialized.")
except Exception as e:
    logger.error(f"Failed to initialize Astral Geocoder: {e}. Timezone detection might fail.")
    astral_geo = None

geolocator = Nominatim(user_agent=GEOPY_USER_AGENT)
# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 –∑–∞–ø—Ä–æ—Å –≤ 1.1 —Å–µ–∫—É–Ω–¥—ã –∫ Nominatim
geocode = RateLimiter(geolocator.reverse, min_delay_seconds=1.1, error_wait_seconds=5.0)

scheduler = AsyncIOScheduler(timezone="UTC") # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def escape_md(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2."""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    temp_text = str(text)
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç '\'
    escaped_text = ""
    prev_char_is_escape = False
    for char in temp_text:
        if char in escape_chars and not prev_char_is_escape:
            escaped_text += f'\\{char}'
        else:
            escaped_text += char
        prev_char_is_escape = char == '\\'
    return escaped_text

# --- –î–∞–Ω–Ω—ã–µ –£—á–µ–Ω–∏—è ---
# (PRINCIPLES, TASKS, DEFAULT_PHASE - –æ—Å—Ç–∞—é—Ç—Å—è)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MANTRAS_DATA –ó–ê–ü–û–õ–ù–ï–ù–ê –≤—Å–µ–º–∏ –º–∞–Ω–∞—Ç—Ä–∞–º–∏!
PRINCIPLES = [ escape_md(p) for p in [
    "1. ¬´–ó”ï—Ö—Ö—ã —Ñ–∞—Ä–Ω”ï–π —Ü”ï—Ä¬ª (–ñ–∏–≤–∏ –±–ª–∞–≥–æ–¥–∞—Ç—å—é –ó–µ–º–ª–∏)",
    "2. ¬´–ù—ã—Ö–∞—Å”ï–π –∏—É–≥–æ–Ω–¥¬ª (–ï–¥–∏–Ω —á–µ—Ä–µ–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º)",
    "15. ¬´–§”ï—Å—Ç–∞–≥ —Ñ—ã—Å—Ç - –Ω–æ–≥ —Ñ—ã—Å—Ç”ï–Ω –π”ï —Ä–∞–π–¥–∏–∞–Ω¬ª (–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å - –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π)"
]]
TASKS = { k: {ik: escape_md(iv) for ik, iv in v.items()} for k, v in {
    "phase1_week1": { "title": "–§–∞–∑–∞ 1, –ù–µ–¥–µ–ª—è 1: –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", "daily_habit": "1-2 –º–∏–Ω –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.", "meal_habit": "–ü–µ—Ä–µ–¥ 1 –ø—Ä–∏–µ–º–æ–º –ø–∏—â–∏ —Å–∫–∞–∂–∏—Ç–µ –º–∞–Ω—Ç—Ä—É: ¬´–ó”ï—Ö—Ö, –¥”ï —Ñ–∞—Ä–Ω”ï–π —Ü”ï—Ä—ã–Ω¬ª.", "reflection": "–í–µ—á–µ—Ä–æ–º –∑–∞–ø–∏—à–∏—Ç–µ 1 –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ." },
    "phase1_week2": { "title": "–§–∞–∑–∞ 1, –ù–µ–¥–µ–ª—è 2: –í–æ–¥–∞ –∏ –°–ª–æ–≤–∞", "daily_habit": "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–æ–¥—ã (–ü—Ä–∏–Ω—Ü–∏–ø 5).", "communication_habit": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø–∞—É–∑—É –∏ –ø—Ä–∞–≤–¥–∏–≤–æ—Å—Ç—å –≤ 1 —Ä–∞–∑–≥–æ–≤–æ—Ä–µ (–ü—Ä–∏–Ω—Ü–∏–ø 13).", "reflection": "–ó–∞–ø–∏—à–∏—Ç–µ –º–æ–º–µ–Ω—Ç—ã –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏." }
}.items()}
DEFAULT_PHASE = "phase1_week1"
ACTIVITY_CATEGORIES = ["mindfulness", "nature", "service"]
CATEGORY_EMOJI_MAP = {"mindfulness": "üßò", "nature": "üå≥", "service": "ü§ù"}
CATEGORY_NAMES_MAP = {"mindfulness": "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "nature": "–ü—Ä–∏—Ä–æ–¥–∞", "service": "–°–ª—É–∂–µ–Ω–∏–µ"}
MANTRAS_DATA = [ # –°–û–ö–†–ê–©–ï–ù–ù–´–ô –ü–†–ò–ú–ï–† - –ó–ê–ü–û–õ–ù–ò–¢–ï –ü–û–õ–ù–û–°–¢–¨–Æ!
        ("–ï–¥–∏–Ω—Å—Ç–≤–æ —Å –ø—Ä–∏—Ä–æ–¥–æ–π", "¬´–ó”ï—Ö—Ö - –Ω”ï –∑”ï—Ä–¥”ï¬ª", "–ó–µ–º–ª—è - –Ω–∞—à–µ —Å–µ—Ä–¥—Ü–µ"),
        ("–ï–¥–∏–Ω—Å—Ç–≤–æ —Å –ø—Ä–∏—Ä–æ–¥–æ–π", "¬´–î–æ–Ω - —Ñ–∞—Ä–Ω¬ª", "–í–æ–¥–∞ - –±–ª–∞–≥–æ–¥–∞—Ç—å"),
        ("–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ", "¬´–ú–∞—Ö - –∏—É –∑”ï—Ä–¥”ï¬ª", "–ú—ã - –æ–¥–Ω–æ —Å–µ—Ä–¥—Ü–µ"),
        # ... –î–û–ë–ê–í–¨–¢–ï –í–°–ï –ú–ê–ù–¢–†–´ –ó–î–ï–°–¨ ...
]

# --- –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö (SQLite) ---
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(f'''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                current_phase TEXT NOT NULL DEFAULT '{DEFAULT_PHASE}',
                first_name TEXT,
                streak INTEGER DEFAULT 0,
                last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                location_city TEXT DEFAULT '{DEFAULT_CITY_NAME}',
                location_lat REAL DEFAULT {DEFAULT_LATITUDE},
                location_lon REAL DEFAULT {DEFAULT_LONGITUDE},
                timezone TEXT DEFAULT '{DEFAULT_TIMEZONE}'
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS diary_entries (
                entry_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                entry_text TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS mantras (
                mantra_id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT NOT NULL,
                ossetian_text TEXT NOT NULL UNIQUE,
                russian_translation TEXT
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS daily_activity (
                activity_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                activity_date DATE DEFAULT CURRENT_DATE, -- SQLite —Ö—Ä–∞–Ω–∏—Ç DATE –∫–∞–∫ TEXT
                category TEXT NOT NULL,
                completed BOOLEAN DEFAULT FALSE,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, activity_date, category)
            )
        ''')
        await db.commit()
    logger.info("Database initialized.")

async def populate_mantras_if_empty():
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT COUNT(*) FROM mantras")
        count_result = await cursor.fetchone()
        if count_result and count_result[0] == 0:
            logger.info("Populating mantras table...")
            try:
                await db.executemany(
                    "INSERT OR IGNORE INTO mantras (category, ossetian_text, russian_translation) VALUES (?, ?, ?)",
                    MANTRAS_DATA
                )
                await db.commit()
                inserted_cursor = await db.execute("SELECT COUNT(*) FROM mantras") # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Å—Ç–∞–≤–∏–ª–æ—Å—å
                inserted_count = await inserted_cursor.fetchone()
                logger.info(f"Populated mantras table with {inserted_count[0] if inserted_count else 0} entries (expected: {len(MANTRAS_DATA)}).")
            except aiosqlite.Error as e:
                logger.error(f"Failed to populate mantras table: {e}")
        else:
            # logger.info("Mantras table already populated or count check failed.")
            pass # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î (add_user, get_user, update_location, log_activity, get_activity, stats) ---
# (–ö–æ–¥ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ)
async def add_user_if_not_exists(user_id: int, first_name: str):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        user_exists = await cursor.fetchone()
        current_ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S') # –§–æ—Ä–º–∞—Ç –¥–ª—è SQLite
        if not user_exists:
            await db.execute(
                "INSERT INTO users (user_id, current_phase, first_name, location_city, location_lat, location_lon, timezone, last_login) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                (user_id, DEFAULT_PHASE, first_name, DEFAULT_CITY_NAME, DEFAULT_LATITUDE, DEFAULT_LONGITUDE, DEFAULT_TIMEZONE, current_ts)
            )
            await db.commit()
            logger.info(f"Added new user {user_id} ({first_name}) with default phase {DEFAULT_PHASE}")
            return True
        else:
             await db.execute("UPDATE users SET first_name = ?, last_login = ? WHERE user_id = ?", (first_name, current_ts, user_id))
             await db.commit()
        return False

async def get_user_data(user_id: int) -> Optional[Dict]:
     async with aiosqlite.connect(DB_NAME) as db:
         cursor = await db.execute("SELECT current_phase, streak, first_name, location_city, location_lat, location_lon, timezone FROM users WHERE user_id = ?", (user_id,))
         row = await cursor.fetchone()
         if row:
             return {"current_phase": row[0], "streak": row[1], "first_name": row[2], "city": row[3], "lat": row[4], "lon": row[5], "tz": row[6]}
         return None

async def update_user_location(user_id: int, lat: float, lon: float, city: str, tz: str):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE users SET location_lat = ?, location_lon = ?, location_city = ?, timezone = ? WHERE user_id = ?", (lat, lon, city, tz, user_id))
        await db.commit()
        logger.info(f"Updated location for user {user_id} to {city} ({lat},{lon}), tz: {tz}")

async def log_daily_activity(user_id: int, category: str):
    if category not in ACTIVITY_CATEGORIES: return
    today_str = date.today().isoformat() # –§–æ—Ä–º–∞—Ç 'YYYY-MM-DD'
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            INSERT OR REPLACE INTO daily_activity (user_id, activity_date, category, completed, timestamp)
            VALUES (?, ?, ?, TRUE, CURRENT_TIMESTAMP)
        """, (user_id, today_str, category))
        await db.commit()
        logger.info(f"Logged activity '{category}' for user {user_id} for {today_str}.")

async def get_daily_activity_status(user_id: int) -> Dict[str, bool]:
    status = {cat: False for cat in ACTIVITY_CATEGORIES}
    today_str = date.today().isoformat()
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT category FROM daily_activity WHERE user_id = ? AND activity_date = ? AND completed = TRUE", (user_id, today_str))
        rows = await cursor.fetchall()
        for row in rows:
            if row[0] in status: status[row[0]] = True
    return status

async def get_user_weekly_stats_detailed(user_id: int) -> Dict:
    stats = {"days_active": 0, "tasks_done_total": 0, "diary_entries": 0, "categories_done": {cat: 0 for cat in ACTIVITY_CATEGORIES}}
    week_ago_str = (date.today() - timedelta(days=6)).isoformat()
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT COUNT(DISTINCT activity_date) FROM daily_activity WHERE user_id = ? AND activity_date >= ?", (user_id, week_ago_str))
        result = await cursor.fetchone(); stats["days_active"] = result[0] if result else 0
        cursor = await db.execute("SELECT COUNT(*) FROM diary_entries WHERE user_id = ? AND DATE(timestamp) >= ?", (user_id, week_ago_str))
        result = await cursor.fetchone(); stats["diary_entries"] = result[0] if result else 0
        cursor = await db.execute("SELECT category, COUNT(*) FROM daily_activity WHERE user_id = ? AND activity_date >= ? AND completed = TRUE GROUP BY category", (user_id, week_ago_str))
        rows = await cursor.fetchall()
        for row in rows:
            cat, count = row
            if cat in stats["categories_done"]:
                stats["categories_done"][cat] = count
                stats["tasks_done_total"] += count
    return stats

async def get_group_weekly_stats_categorized() -> Dict:
    stats = {"total_users_active": 0, "total_tasks_done": 0, "categories_done": {cat: 0 for cat in ACTIVITY_CATEGORIES}}
    week_ago_str = (date.today() - timedelta(days=6)).isoformat()
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT COUNT(DISTINCT user_id) FROM daily_activity WHERE activity_date >= ? AND completed = TRUE", (week_ago_str,))
        result = await cursor.fetchone(); stats["total_users_active"] = result[0] if result else 0
        cursor = await db.execute("SELECT category, COUNT(*) FROM daily_activity WHERE activity_date >= ? AND completed = TRUE GROUP BY category", (week_ago_str,))
        rows = await cursor.fetchall()
        for row in rows:
            cat, count = row
            if cat in stats["categories_done"]:
                stats["categories_done"][cat] = count
                stats["total_tasks_done"] += count
    return stats

async def get_random_mantra() -> Optional[Dict]:
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT category, ossetian_text, russian_translation FROM mantras ORDER BY RANDOM() LIMIT 1")
        row = await cursor.fetchone()
        if row: return {"category": row[0], "ossetian": row[1], "russian": row[2]}
        return None

async def get_random_mantra_by_category(category: str) -> Optional[Dict]:
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT ossetian_text, russian_translation FROM mantras WHERE category = ? ORDER BY RANDOM() LIMIT 1", (category,))
        row = await cursor.fetchone()
        if row: return {"category": category, "ossetian": row[0], "russian": row[1]}
        return await get_random_mantra()

async def add_diary_entry(user_id: int, text: str):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT INTO diary_entries (user_id, entry_text) VALUES (?, ?)", (user_id, text))
        await db.commit()
        logger.info(f"Added diary entry for user {user_id}")

async def get_last_diary_entries(user_id: int, limit: int = 5) -> List[Dict]:
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("SELECT timestamp, entry_text FROM diary_entries WHERE user_id = ? ORDER BY timestamp DESC LIMIT ?", (user_id, limit))
        rows = await cursor.fetchall()
        return [{"timestamp": row[0], "text": row[1]} for row in rows]

async def increment_user_streak(user_id: int) -> int:
     # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ last_task_done_date –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞
     async with aiosqlite.connect(DB_NAME) as db:
         today_str = date.today().isoformat()
         await db.execute("UPDATE users SET streak = streak + 1, last_task_done_date = ? WHERE user_id = ?", (today_str, user_id))
         await db.commit()
         cursor = await db.execute("SELECT streak FROM users WHERE user_id = ?", (user_id,))
         result = await cursor.fetchone()
         new_streak = result[0] if result else 0
         logger.info(f"Incremented streak for user {user_id} to {new_streak}")
         return new_streak


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
async def reset_daily_activities_job():
    """–£–¥–∞–ª—è–µ—Ç –≤—á–µ—Ä–∞—à–Ω–∏–µ –∏ –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DATE('now', 'localtime', '-1 day') –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    one_day_ago_str = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute("DELETE FROM daily_activity WHERE activity_date < ?", (one_day_ago_str,))
        deleted_rows = cursor.rowcount # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        await db.commit()
        logger.info(f"Daily reset job: Deleted {deleted_rows} old activity entries.")


# --- –†–∞—Å—á–µ—Ç –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞ ---
def get_sun_times(lat: float, lon: float, tz_str: str, city_name: str = "Default") -> Dict[str, Optional[datetime]]:
    try:
        loc = Location((city_name, "region", lat, lon, tz_str, 0))
        today_dt = datetime.now(pytz.timezone(tz_str)).date() # –ë–µ—Ä–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º–∑–æ–Ω—ã
        s = sun(loc.observer, date=today_dt, tzinfo=loc.tzinfo)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã datetime
        sunrise_dt = s["sunrise"]
        sunset_dt = s["sunset"]
        return {"sunrise": sunrise_dt, "sunset": sunset_dt}
    except Exception as e:
        logger.error(f"Error calculating sun times for {city_name} ({lat}, {lon}), tz={tz_str}: {e}")
        return {"sunrise": None, "sunset": None}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class DiaryStates(StatesGroup):
    waiting_for_entry = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard() -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üóìÔ∏è –ü–ª–∞–Ω –¥–Ω—è"), KeyboardButton(text="‚ú® –ú–∞–Ω—Ç—Ä–∞")],
        [KeyboardButton(text="‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫"), KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="üöÄ Mini App", web_app=WebAppInfo(url="https://e0dfaa5fc43a.ngrok-free.app"))]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=False)
    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await add_user_if_not_exists(user_id, user_name)
    await state.clear()
    keyboard = get_main_menu_keyboard()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {escape_md(user_name)} üôè\n"
        f"–°–Ω–æ–≤–∞ –Ω–∞ –ø—É—Ç–∏ –ù—ã—Ö–∞—Å\\-–§–∞—Ä–Ω\\! ‚ú®üåç\n"
        f"–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è\\?",
        reply_markup=keyboard
    )

@dp.message(F.text.in_({"‚ùì –ü–æ–º–æ—â—å", "/help"})) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥—É
async def handle_help(message: Message):
    help_text = escape_md(
        "üåø –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º '–ù—ã—Ö–∞—Å-–§–∞—Ä–Ω':\n\n"
        "üóìÔ∏è –ü–ª–∞–Ω –¥–Ω—è - –ó–∞–¥–∞—á–∏ –∏ –º–∞–Ω—Ç—Ä—ã –Ω–∞ –¥–µ–Ω—å, –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
        "‚ú® –ú–∞–Ω—Ç—Ä–∞ - –°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –£—á–µ–Ω–∏—è.\n"
        "‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫ - –ó–∞–ø–∏—Å—å –º—ã—Å–ª–µ–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.\n"
        "üìç –õ–æ–∫–∞—Ü–∏—è - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞.\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
        "‚ùì –ü–æ–º–æ—â—å - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@dp.message(F.text.in_({"‚ú® –ú–∞–Ω—Ç—Ä–∞", "/mantras"}))
async def handle_mantras_button(message: Message):
    mantra_data = await get_random_mantra()
    if mantra_data:
        response = f"üåø *{escape_md(mantra_data['category'])}*\n\n"
        response += f"*{escape_md(mantra_data['ossetian'])}*\n\n"
        if mantra_data['russian']:
            response += f"_{escape_md(mantra_data['russian'])}_"
        await message.answer(response)
    else:
        await message.answer(escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–Ω—Ç—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"))

@dp.message(F.text.in_({"üóìÔ∏è –ü–ª–∞–Ω –¥–Ω—è", "/today"}))
async def handle_daily_plan(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    if not user_data:
        await message.answer(escape_md("–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."))
        return

    sun_times = get_sun_times(user_data["lat"], user_data["lon"], user_data["tz"], user_data["city"])
    sunrise_dt = sun_times.get("sunrise")
    sunset_dt = sun_times.get("sunset")
    sunrise_str = sunrise_dt.strftime('%H:%M') if sunrise_dt else "–Ω/–¥"
    sunset_str = sunset_dt.strftime('%H:%M') if sunset_dt else "–Ω/–¥"

    activity_status = await get_daily_activity_status(user_id)
    rings = []
    for cat_code in ACTIVITY_CATEGORIES:
        emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
        cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
        completed = activity_status.get(cat_code, False)
        rings.append(f"{emoji} {('üü¢' if completed else '‚ö™Ô∏è')} {escape_md(cat_name)}")
    rings_text = " \\| ".join(rings) if rings else escape_md("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞")

    current_phase = user_data.get("current_phase", DEFAULT_PHASE)
    task_info = TASKS.get(current_phase)
    main_task_text = task_info.get('daily_habit', escape_md("–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")) if task_info else escape_md("–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")

    # –í—ã–±–∏—Ä–∞–µ–º –º–∞–Ω—Ç—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–ø—Ä–∏–º–µ—Ä)
    now_time = datetime.now(pytz.timezone(user_data["tz"])).time()
    morning_mantra_cat = "–õ–∏—á–Ω—ã–π —Ä–æ—Å—Ç" if now_time < time(12,0) else "–ï–¥–∏–Ω—Å—Ç–≤–æ —Å –ø—Ä–∏—Ä–æ–¥–æ–π"
    evening_mantra_cat = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" if now_time >= time(18,0) else "–°–ª—É–∂–µ–Ω–∏–µ"

    morning_mantra_data = await get_random_mantra_by_category(morning_mantra_cat)
    evening_mantra_data = await get_random_mantra_by_category(evening_mantra_cat)

    plan_text = f"üóìÔ∏è *–ü–ª–∞–Ω –Ω–∞ {escape_md(date.today().strftime('%d.%m'))}* \\({escape_md(user_data['city'])}\\)\n\n"
    plan_text += f"‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: `{escape_md(sunrise_str)}` \\| üåô –ó–∞–∫–∞—Ç: `{escape_md(sunset_str)}`\n\n"
    plan_text += f"üåÖ *–£—Ç—Ä–æ \\(–¥–æ ~12:00\\)*\n"
    if morning_mantra_data:
        plan_text += f"   _{escape_md(morning_mantra_data['ossetian'])}_\n"
    plan_text += escape_md("   –ü—Ä–∞–∫—Ç–∏–∫–∞: –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –¥–µ–Ω—å —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é\\.\n\n")
    plan_text += f"üåç *–î–µ–Ω—å*\n"
    plan_text += f"   ‚ö° –ü—Ä–∞–∫—Ç–∏–∫–∞: {main_task_text}\n"
    plan_text += f"   üéØ –û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ:\n\n"
    plan_text += f"üåÉ *–í–µ—á–µ—Ä \\(–ø–æ—Å–ª–µ ~18:00\\)*\n"
    if evening_mantra_data:
        plan_text += f"   _{escape_md(evening_mantra_data['ossetian'])}_\n"
    plan_text += escape_md("   üßò –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤–µ—Ä—à–∏ –¥–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –≤ '‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫'\\.\n\n")
    plan_text += f"üíö *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è:*\n   {rings_text}"

    inline_kb_buttons = []
    for cat_code in ACTIVITY_CATEGORIES:
         emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
         cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
         completed = activity_status.get(cat_code, False)
         inline_kb_buttons.append(
             InlineKeyboardButton(text=f"{'‚úÖ' if completed else emoji} {cat_name}", callback_data=f"log_activity:{cat_code}")
         )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[inline_kb_buttons])

    await message.answer(plan_text, reply_markup=inline_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
@dp.callback_query(F.data.startswith("log_activity:"))
async def process_log_activity_callback(callback_query: CallbackQuery, state: FSMContext):
    category_to_log = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    await log_daily_activity(user_id, category_to_log)
    await callback_query.answer(f"‚úÖ {CATEGORY_NAMES_MAP.get(category_to_log, category_to_log)} –æ—Ç–º–µ—á–µ–Ω–æ!")

    # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    user_data = await get_user_data(user_id)
    if not user_data: return

    sun_times = get_sun_times(user_data["lat"], user_data["lon"], user_data["tz"], user_data["city"])
    sunrise_dt = sun_times.get("sunrise")
    sunset_dt = sun_times.get("sunset")
    sunrise_str = sunrise_dt.strftime('%H:%M') if sunrise_dt else "–Ω/–¥"
    sunset_str = sunset_dt.strftime('%H:%M') if sunset_dt else "–Ω/–¥"

    activity_status = await get_daily_activity_status(user_id) # –ü–æ–ª—É—á–∞–µ–º –°–ù–û–í–ê
    rings = []
    for cat_code in ACTIVITY_CATEGORIES:
         emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
         cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
         completed = activity_status.get(cat_code, False)
         rings.append(f"{emoji} {('üü¢' if completed else '‚ö™Ô∏è')} {escape_md(cat_name)}")
    rings_text = " \\| ".join(rings)

    current_phase = user_data.get("current_phase", DEFAULT_PHASE)
    task_info = TASKS.get(current_phase)
    main_task_text = task_info.get('daily_habit', escape_md("–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")) if task_info else escape_md("–ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–Ω—è")

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞–Ω—Ç—Ä—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    morning_mantra_line = ""
    evening_mantra_line = ""
    if callback_query.message and callback_query.message.text:
        original_text_lines = callback_query.message.text.split('\n')
        in_morning, in_evening = False, False
        for line in original_text_lines:
            clean_line = line.strip()
            if clean_line.startswith("üåÖ *–£—Ç—Ä–æ"): in_morning = True; in_evening = False; continue
            if clean_line.startswith("üåç *–î–µ–Ω—å"): in_morning = False; in_evening = False; continue
            if clean_line.startswith("üåÉ *–í–µ—á–µ—Ä"): in_morning = False; in_evening = True; continue
            if in_morning and clean_line.startswith("_"): morning_mantra_line = line + "\n"; continue
            if in_evening and clean_line.startswith("_"): evening_mantra_line = line + "\n"; continue

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    plan_text = f"üóìÔ∏è *–ü–ª–∞–Ω –Ω–∞ {escape_md(date.today().strftime('%d.%m'))}* \\({escape_md(user_data['city'])}\\)\n\n"
    plan_text += f"‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: `{escape_md(sunrise_str)}` \\| üåô –ó–∞–∫–∞—Ç: `{escape_md(sunset_str)}`\n\n"
    plan_text += f"üåÖ *–£—Ç—Ä–æ \\(–¥–æ ~12:00\\)*\n{morning_mantra_line}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    plan_text += escape_md("   –ü—Ä–∞–∫—Ç–∏–∫–∞: –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –¥–µ–Ω—å —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é\\.\n\n")
    plan_text += f"üåç *–î–µ–Ω—å*\n   ‚ö° –ü—Ä–∞–∫—Ç–∏–∫–∞: {main_task_text}\n"
    plan_text += f"   üéØ –û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ:\n\n"
    plan_text += f"üåÉ *–í–µ—á–µ—Ä \\(–ø–æ—Å–ª–µ ~18:00\\)*\n{evening_mantra_line}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
    plan_text += escape_md("   üßò –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤–µ—Ä—à–∏ –¥–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –≤ '‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫'\\.\n\n")
    plan_text += f"üíö *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è:*\n   {rings_text}"

    # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    inline_kb_buttons = []
    for cat_code in ACTIVITY_CATEGORIES:
         emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
         cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
         completed = activity_status.get(cat_code, False)
         inline_kb_buttons.append(
             InlineKeyboardButton(text=f"{'‚úÖ' if completed else emoji} {cat_name}", callback_data=f"log_activity:{cat_code}")
         )
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[inline_kb_buttons])

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç (—Ö–æ—Ç—è –±—ã –∫–æ–ª—å—Ü–∞ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        if callback_query.message.text != plan_text:
             await callback_query.message.edit_text(plan_text, reply_markup=inline_kb)
        else:
             # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ), –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
             await callback_query.answer("‚úÖ –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ!")
    except TelegramAPIError as e:
        if "message is not modified" in str(e):
             await callback_query.answer("‚úÖ –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ!")
        else:
             logger.warning(f"Could not edit daily plan message: {e}")
             # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º
             await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω.", show_alert=True)


@dp.message(F.text.in_({"‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫", "/diary"}))
async def handle_diary_button(message: Message, state: FSMContext):
    await message.answer(escape_md("üìù –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ? –ù–∞–ø–∏—à–∏:"))
    await state.set_state(DiaryStates.waiting_for_entry)

@dp.message(DiaryStates.waiting_for_entry)
async def process_diary_entry_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_entry = message.text
    try:
        await add_diary_entry(user_id, user_entry)
        # –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é 'mindfulness' –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫
        # await log_daily_activity(user_id, "mindfulness")
        await message.answer(escape_md("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üôè"), reply_markup=get_main_menu_keyboard()) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é
    except Exception as e:
        logger.error(f"Failed to add diary entry for user {user_id}: {e}")
        await message.answer(escape_md("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."), reply_markup=get_main_menu_keyboard())
    finally:
        await state.clear()

@dp.message(Command('mydiary')) # –û—Å—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
async def handle_mydiary(message: Message):
    user_id = message.from_user.id
    entries = await get_last_diary_entries(user_id, limit=5)
    if not entries:
        await message.answer(escape_md("–í –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫'."))
        return
    response_text = escape_md("üìñ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n") # –î–æ–±–∞–≤–∏–ª —ç–º–æ–¥–∂–∏
    for entry in reversed(entries):
        try:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ timestamp —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            ts_str = str(entry['timestamp']).split('.')[0]
            ts_dt = datetime.strptime(ts_str, '%Y-%m-%d %H:%M:%S')
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ —Ç–∞–π–º–∑–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–µ—Å—Ç–Ω–∞
            ts_formatted = ts_dt.strftime('%d.%m.%y %H:%M')
        except (ValueError, TypeError):
             ts_formatted = str(entry['timestamp']) # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç—Ä–æ–∫–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        response_text += f"\n*{escape_md(ts_formatted)}*\n"
        response_text += f"{escape_md(entry['text'])}\n"
    if len(response_text) > 4090:
         response_text = response_text[:4090] + "\n" + escape_md("...")
    await message.answer(response_text)


@dp.message(F.text == "üìç –õ–æ–∫–∞—Ü–∏—è")
async def handle_location_button(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")] # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer(
        escape_md("–ß—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞, –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è üåç.\n"
                  "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å...' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' üëá"),
        reply_markup=keyboard
    )

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def handle_location_cancel(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏."""
    await message.answer("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", reply_markup=get_main_menu_keyboard())


@dp.message(StateFilter(None), F.content_type == ContentType.LOCATION)
async def handle_user_location(message: Message):
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")
    await message.answer(escape_md("‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å..."), reply_markup=types.ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏

    city = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    tz_str = DEFAULT_TIMEZONE

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º geopy (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
        location_info = await geocode(f"{lat}, {lon}", language='ru', exactly_one=True, addressdetails=True, timeout=10)
        if location_info and location_info.raw.get('address'):
            address = location_info.raw['address']
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥/–Ω–∞—Å. –ø—É–Ω–∫—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            city = address.get('city', address.get('town', address.get('village', address.get('county', city))))
            country_code = address.get('country_code', '').upper()
            logger.info(f"Geocoded location: City='{city}', Country Code={country_code}")

            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É —á–µ—Ä–µ–∑ Astral
            if astral_geo:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –≥–æ—Ä–æ–¥—É
                    astral_loc_info = astral_geo.lookup(city)
                    if astral_loc_info:
                         tz_str = astral_loc_info.timezone
                         logger.info(f"Found timezone via astral for city '{city}': {tz_str}")
                    elif country_code: # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è, –ø—Ä–æ–±—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–µ
                         astral_loc_info_country = astral_geo.lookup(country_code, is_country=True)
                         if astral_loc_info_country:
                             tz_str = astral_loc_info_country.timezone
                             logger.info(f"Found timezone via astral for country '{country_code}': {tz_str}")
                         else:
                             logger.warning(f"Could not find timezone for city '{city}' or country '{country_code}' via astral.")
                    else:
                         logger.warning(f"Could not find timezone for city '{city}' via astral (no country code).")

                except Exception as e_astral:
                    logger.error(f"Error looking up timezone via astral: {e_astral}")
            else:
                 logger.warning("Astral Geocoder not initialized.")
        else:
             logger.warning(f"Geopy could not find address details for {lat},{lon}")
    except Exception as e_geo:
        logger.error(f"Geopy error getting location info: {e_geo}")
        # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        await message.answer(escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."), reply_markup=get_main_menu_keyboard())
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await update_user_location(user_id, lat, lon, city, tz_str)

    await message.answer(
        escape_md(f"üìç –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *{city}*\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{tz_str}`\n–°–ø–∞—Å–∏–±–æ\\! üôè"),
        reply_markup=get_main_menu_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    )


@dp.message(F.text.in_({"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/stats"}))
async def handle_stats_button(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    stats_detailed = await get_user_weekly_stats_detailed(user_id)

    if not user_data:
        await message.answer(escape_md("–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."))
        return

    streak = user_data.get('streak', 0)

    stats_text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n\n"
    stats_text += f"‚òÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: *{escape_md(stats_detailed['days_active'])}* –∏–∑ 7\n"
    stats_text += f"‚úçÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: *{escape_md(stats_detailed['diary_entries'])}*\n"
    stats_text += f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: *{escape_md(streak)}* –¥–Ω—è\\(–µ–π\\)\n\n"
    stats_text += f"üéØ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
    has_category_stats = False
    for cat_code in ACTIVITY_CATEGORIES:
        count = stats_detailed['categories_done'].get(cat_code, 0)
        # if count > 0: # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ 0
        has_category_stats = True # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—ã –µ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
        cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
        stats_text += f"   {emoji} {escape_md(cat_name)}: *{escape_md(count)}*\n"
    if not has_category_stats:
         stats_text += escape_md("   –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.\n")

    stats_text += f"\nüìà –û–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫: *{escape_md(stats_detailed['tasks_done_total'])}*"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_group_stats")]
    ])

    await message.answer(stats_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query(F.data == "show_group_stats")
async def process_show_group_stats(callback_query: CallbackQuery):
     stats = await get_group_weekly_stats_categorized()
     response = f"üåç *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n\n"
     response += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *{escape_md(stats['total_users_active'])}*\n\n"
     response += f"üéØ *–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫:*\n"
     has_group_cat_stats = False
     for cat_code in ACTIVITY_CATEGORIES:
        count = stats['categories_done'].get(cat_code, 0)
        if count > 0:
             has_group_cat_stats = True
             emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
             cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
             response += f"   {emoji} {escape_md(cat_name)}: *{escape_md(count)}*\n"
     if not has_group_cat_stats:
         response += escape_md("   –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n")

     response += f"\nüìà –û–±—â–µ–µ —á–∏—Å–ª–æ –ø—Ä–∞–∫—Ç–∏–∫: *{escape_md(stats['total_tasks_done'])}*"

     await callback_query.message.answer(response)
     await callback_query.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    await init_db()
    await populate_mantras_if_empty()

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
    scheduler.add_job(reset_daily_activities_job, 'cron', hour=0, minute=5, timezone='UTC') # –°–¥–≤–∏–Ω—É–ª –Ω–∞ 5 –º–∏–Ω—É—Ç
    scheduler.start()
    logger.info("Scheduler started for daily reset.")

    logger.info("Starting bot polling...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.critical(f"Unhandled exception at top level: {e}", exc_info=True)
    finally:
        if scheduler.running:
             scheduler.shutdown(wait=False) # –ù–µ –∂–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
             logger.info("Scheduler shut down.")