# handlers/location.py
"""
Location handlers: prompt for and process user geolocation
"""
import logging
from aiogram import F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    ContentType
)
from geopy.extra.rate_limiter import RateLimiter
from astral.geocoder import lookup as AstralLookup, database as astral_database
from db import update_user_location
from config import DEFAULT_TIMEZONE
from utils import escape_md
from keyboards import get_main_menu_keyboard

logger = logging.getLogger(__name__)

def register_location_handler(dp, geocode: RateLimiter, astral_geo: AstralLookup) -> None:
    """Register location-related handlers with access to geocode and astral_geo."""
    @dp.message(F.text == "üìç –õ–æ–∫–∞—Ü–∏—è")
    async def handle_location_button(message: Message) -> None:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        prompt = (
            "–ß—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞, –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è üåç.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å...' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' üëá"
        )
        await message.answer(prompt, parse_mode=None, reply_markup=keyboard)

    @dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
    async def handle_location_cancel(message: Message) -> None:
        await message.answer(
            "–û—Ç–º–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode=None,
            reply_markup=get_main_menu_keyboard()
        )

    @dp.message(F.content_type == ContentType.LOCATION)
    async def handle_user_location_wrapper(message: Message) -> None:
        # wrapper to pass geocode and astral_geo into the logic
        await handle_user_location(message, geocode, astral_geo)

async def handle_user_location(
    message: Message,
    geocode: RateLimiter,
    astral_geo: AstralLookup
) -> None:
    """Process user-sent location: reverse geocode, save, confirm."""
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")

    await message.answer(
        "‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...",
        parse_mode=None,
        reply_markup=ReplyKeyboardRemove()
    )

    city = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    tz_str = DEFAULT_TIMEZONE

    # 1) geocode lookup
    try:
        location_info = geocode(
            f"{lat}, {lon}",
            language='ru',
            exactly_one=True,
            addressdetails=True,
            timeout=10
        )
        addr = location_info.raw.get('address', {}) if location_info else {}
        city = addr.get('city') or addr.get('town') or addr.get('village') or city
        country_code = addr.get('country_code', '').upper()
    except Exception as err:
        logger.error(f"Geopy error: {err}")
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=None,
            reply_markup=get_main_menu_keyboard()
        )
        return

    # 2) astral lookup city
    try:
        astral_loc = astral_geo(city, astral_database())
        if astral_loc:
            tz_str = astral_loc.timezone
    except Exception as err:
        logger.debug(f"Astral lookup by city failed: {err}")

    # 3) astral lookup country if needed
    if tz_str == DEFAULT_TIMEZONE and country_code:
        try:
            astral_loc_c = astral_geo(country_code, astral_database())
            if astral_loc_c:
                tz_str = astral_loc_c.timezone
        except Exception as err:
            logger.debug(f"Astral lookup by country failed: {err}")

    # save to DB and confirm
    await update_user_location(user_id, lat, lon, city, tz_str)
    confirmation = (
        f"üìç –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {escape_md(city)}\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {escape_md(tz_str)}\n"
        "–°–ø–∞—Å–∏–±–æ! üôè"
    )
    await message.answer(
        confirmation,
        parse_mode=None,
        reply_markup=get_main_menu_keyboard()
    )
