"""
Optimized Telegram bot for FarnPath - spiritual practice app.
Key optimizations:
- Connection pooling for database
- Better error handling
- Modular structure
- Performance improvements
- Clean separation of concerns
"""
import asyncio
import logging
from datetime import datetime, date, time
from typing import Optional

import pytz
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ContentType, WebAppInfo
)
from aiogram.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from src.config.config import API_TOKEN, GEOPY_USER_AGENT, ACTIVITY_CATEGORIES, CATEGORY_EMOJI_MAP, CATEGORY_NAMES_MAP
from src.database.connection import db_manager
from src.database.repository import (
    UserRepository, ActivityRepository, MantraRepository, 
    DiaryRepository, StatsRepository
)
from src.utils.utils import escape_md, get_sun_times
from src.utils.keyboards import get_main_menu_keyboard

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Bot setup
if not API_TOKEN:
    raise ValueError("API_TOKEN not found in environment variables")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="MarkdownV2"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler(timezone="UTC")

# FSM States
class DiaryStates(StatesGroup):
    waiting_for_entry = State()

# Handlers
@dp.message(Command("start"))
async def handle_start(message: Message, state: FSMContext):
    """Handle /start command."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    try:
        await UserRepository.add_user_if_not_exists(user_id, user_name)
        await state.clear()
        
        keyboard = get_main_menu_keyboard()
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {escape_md(user_name)} üôè\n"
            f"–°–Ω–æ–≤–∞ –Ω–∞ –ø—É—Ç–∏ –ù—ã—Ö–∞—Å\\-–§–∞—Ä–Ω\\! ‚ú®üåç\n"
            f"–ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è\\?",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")

@dp.message(F.text.in_({"‚ùì –ü–æ–º–æ—â—å", "/help"}))
async def handle_help(message: Message):
    """Handle help command."""
    help_text = escape_md(
        "üåø –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º '–ù—ã—Ö–∞—Å-–§–∞—Ä–Ω':\n\n"
        "üóìÔ∏è –ü–ª–∞–Ω –¥–Ω—è - –ó–∞–¥–∞—á–∏ –∏ –º–∞–Ω—Ç—Ä—ã –Ω–∞ –¥–µ–Ω—å, –æ—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
        "‚ú® –ú–∞–Ω—Ç—Ä–∞ - –°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –£—á–µ–Ω–∏—è.\n"
        "‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫ - –ó–∞–ø–∏—Å—å –º—ã—Å–ª–µ–π –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π.\n"
        "üìç –õ–æ–∫–∞—Ü–∏—è - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞.\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í–∞—à –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
        "‚ùì –ü–æ–º–æ—â—å - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())

@dp.message(F.text.in_({"‚ú® –ú–∞–Ω—Ç—Ä–∞", "/mantras"}))
async def handle_mantras_button(message: Message):
    """Handle mantra request."""
    try:
        mantra_data = await MantraRepository.get_random_mantra()
        if mantra_data:
            response = f"üåø *{escape_md(mantra_data.category)}*\n\n"
            response += f"*{escape_md(mantra_data.ossetian_text)}*\n\n"
            if mantra_data.russian_translation:
                response += f"_{escape_md(mantra_data.russian_translation)}_"
            await message.answer(response)
        else:
            await message.answer(escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–Ω—Ç—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"))
    except Exception as e:
        logger.error(f"Error getting mantra: {e}")
        await message.answer(escape_md("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–Ω—Ç—Ä—ã üôè"))

@dp.message(F.text.in_({"üóìÔ∏è –ü–ª–∞–Ω –¥–Ω—è", "/today"}))
async def handle_daily_plan(message: Message):
    """Handle daily plan request."""
    user_id = message.from_user.id
    
    try:
        user_data = await UserRepository.get_user_data(user_id)
        if not user_data:
            await message.answer(escape_md("–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."))
            return

        # Get sun times
        sun_times = get_sun_times(
            user_data.location_lat or 0, 
            user_data.location_lon or 0, 
            user_data.timezone or "UTC", 
            user_data.location_city or "Default"
        )
        
        sunrise_str = sun_times["sunrise"].strftime('%H:%M') if sun_times["sunrise"] else "–Ω/–¥"
        sunset_str = sun_times["sunset"].strftime('%H:%M') if sun_times["sunset"] else "–Ω/–¥"

        # Get activity status
        activity_status = await ActivityRepository.get_daily_activity_status(user_id)
        
        # Build progress rings
        rings = []
        for cat_code in ACTIVITY_CATEGORIES:
            emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
            cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
            completed = activity_status.get(cat_code, False)
            rings.append(f"{emoji} {('üü¢' if completed else '‚ö™Ô∏è')} {escape_md(cat_name)}")
        rings_text = " \\| ".join(rings) if rings else escape_md("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞")

        # Get mantras based on time of day
        now_time = datetime.now(pytz.timezone(user_data.timezone or "UTC")).time()
        morning_mantra_cat = "–õ–∏—á–Ω—ã–π —Ä–æ—Å—Ç" if now_time < time(12, 0) else "–ï–¥–∏–Ω—Å—Ç–≤–æ —Å –ø—Ä–∏—Ä–æ–¥–æ–π"
        evening_mantra_cat = "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" if now_time >= time(18, 0) else "–°–ª—É–∂–µ–Ω–∏–µ"

        morning_mantra = await MantraRepository.get_random_mantra_by_category(morning_mantra_cat)
        evening_mantra = await MantraRepository.get_random_mantra_by_category(evening_mantra_cat)

        # Build plan text
        plan_text = f"üóìÔ∏è *–ü–ª–∞–Ω –Ω–∞ {escape_md(date.today().strftime('%d.%m'))}* \\({escape_md(user_data.location_city or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\\)\n\n"
        plan_text += f"‚òÄÔ∏è –í–æ—Å—Ö–æ–¥: `{escape_md(sunrise_str)}` \\| üåô –ó–∞–∫–∞—Ç: `{escape_md(sunset_str)}`\n\n"
        plan_text += f"üåÖ *–£—Ç—Ä–æ \\(–¥–æ ~12:00\\)*\n"
        if morning_mantra:
            plan_text += f"   _{escape_md(morning_mantra.ossetian_text)}_\n"
        plan_text += escape_md("   –ü—Ä–∞–∫—Ç–∏–∫–∞: –ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –¥–µ–Ω—å —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é\\.\n\n")
        plan_text += f"üåç *–î–µ–Ω—å*\n"
        plan_text += escape_md("   ‚ö° –ü—Ä–∞–∫—Ç–∏–∫–∞: –í—ã–ø–æ–ª–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É\\.\n")
        plan_text += f"   üéØ –û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∏–∂–µ:\n\n"
        plan_text += f"üåÉ *–í–µ—á–µ—Ä \\(–ø–æ—Å–ª–µ ~18:00\\)*\n"
        if evening_mantra:
            plan_text += f"   _{escape_md(evening_mantra.ossetian_text)}_\n"
        plan_text += escape_md("   üßò –ü—Ä–∞–∫—Ç–∏–∫–∞: –ó–∞–≤–µ—Ä—à–∏ –¥–µ–Ω—å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π –≤ '‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫'\\.\n\n")
        plan_text += f"üíö *–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è:*\n   {rings_text}"

        # Create inline keyboard
        inline_kb_buttons = []
        for cat_code in ACTIVITY_CATEGORIES:
            emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
            cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
            completed = activity_status.get(cat_code, False)
            inline_kb_buttons.append(
                InlineKeyboardButton(
                    text=f"{'‚úÖ' if completed else emoji} {cat_name}", 
                    callback_data=f"log_activity:{cat_code}"
                )
            )
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[inline_kb_buttons])

        await message.answer(plan_text, reply_markup=inline_kb)
        
    except Exception as e:
        logger.error(f"Error in daily plan handler: {e}")
        await message.answer(escape_md("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –¥–Ω—è üôè"))

@dp.callback_query(F.data.startswith("log_activity:"))
async def process_log_activity_callback(callback_query: CallbackQuery):
    """Handle activity logging callback."""
    try:
        category_to_log = callback_query.data.split(":")[1]
        user_id = callback_query.from_user.id

        success = await ActivityRepository.log_daily_activity(user_id, category_to_log)
        
        if success:
            cat_name = CATEGORY_NAMES_MAP.get(category_to_log, category_to_log)
            await callback_query.answer(f"‚úÖ {cat_name} –æ—Ç–º–µ—á–µ–Ω–æ!")
            
            # Update the message
            await handle_daily_plan(callback_query.message)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in activity callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@dp.message(F.text.in_({"‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫", "/diary"}))
async def handle_diary_button(message: Message, state: FSMContext):
    """Handle diary button."""
    await message.answer(escape_md("üìù –ß—Ç–æ —É —Ç–µ–±—è –Ω–∞ —Å–µ—Ä–¥—Ü–µ? –ù–∞–ø–∏—à–∏:"))
    await state.set_state(DiaryStates.waiting_for_entry)

@dp.message(DiaryStates.waiting_for_entry)
async def process_diary_entry_message(message: Message, state: FSMContext):
    """Process diary entry."""
    user_id = message.from_user.id
    user_entry = message.text
    
    try:
        success = await DiaryRepository.add_entry(user_id, user_entry)
        if success:
            await message.answer(escape_md("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ üôè"), reply_markup=get_main_menu_keyboard())
        else:
            await message.answer(escape_md("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."), reply_markup=get_main_menu_keyboard())
    except Exception as e:
        logger.error(f"Error saving diary entry: {e}")
        await message.answer(escape_md("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏."), reply_markup=get_main_menu_keyboard())
    finally:
        await state.clear()

@dp.message(Command('mydiary'))
async def handle_mydiary(message: Message):
    """Handle mydiary command."""
    user_id = message.from_user.id
    
    try:
        entries = await DiaryRepository.get_entries(user_id, limit=5)
        if not entries:
            await message.answer(escape_md("–í –≤–∞—à–µ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚úçÔ∏è –î–Ω–µ–≤–Ω–∏–∫'."))
            return
        
        response_text = escape_md("üìñ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:\n")
        for entry in reversed(entries):
            try:
                ts_formatted = entry.timestamp.strftime('%d.%m.%y %H:%M')
            except (ValueError, TypeError):
                ts_formatted = str(entry.timestamp)
            
            response_text += f"\n*{escape_md(ts_formatted)}*\n"
            response_text += f"{escape_md(entry.entry_text)}\n"
        
        if len(response_text) > 4090:
            response_text = response_text[:4090] + "\n" + escape_md("...")
        
        await message.answer(response_text)
        
    except Exception as e:
        logger.error(f"Error getting diary entries: {e}")
        await message.answer(escape_md("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ üôè"))

@dp.message(F.text == "üìç –õ–æ–∫–∞—Ü–∏—è")
async def handle_location_button(message: Message):
    """Handle location button."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer(
        escape_md("–ß—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞, –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è üåç.\n"
                  "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å...' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' üëá"),
        reply_markup=keyboard
    )

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def handle_location_cancel(message: Message):
    """Handle location cancel."""
    await message.answer("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", reply_markup=get_main_menu_keyboard())

@dp.message(StateFilter(None), F.content_type == ContentType.LOCATION)
async def handle_user_location(message: Message):
    """Handle user location."""
    user_id = message.from_user.id
    lat = message.location.latitude
    lon = message.location.longitude
    
    logger.info(f"Received location from user {user_id}: lat={lat}, lon={lon}")
    await message.answer(escape_md("‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å..."), reply_markup=types.ReplyKeyboardRemove())

    # For now, use default values - geocoding can be added later
    city = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    tz_str = "UTC"

    try:
        await UserRepository.update_user_location(user_id, lat, lon, city, tz_str)
        await message.answer(
            escape_md(f"üìç –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *{city}*\n–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `{tz_str}`\n–°–ø–∞—Å–∏–±–æ\\! üôè"),
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error updating location: {e}")
        await message.answer(escape_md("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."), reply_markup=get_main_menu_keyboard())

@dp.message(F.text.in_({"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "/stats"}))
async def handle_stats_button(message: Message):
    """Handle stats button."""
    user_id = message.from_user.id
    
    try:
        user_data = await UserRepository.get_user_data(user_id)
        if not user_data:
            await message.answer(escape_md("–ù–µ –Ω–∞—à–µ–ª –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."))
            return

        stats = await ActivityRepository.get_user_weekly_stats(user_id)

        stats_text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n\n"
        stats_text += f"‚òÄÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: *{escape_md(stats.days_active)}* –∏–∑ 7\n"
        stats_text += f"‚úçÔ∏è –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ: *{escape_md(stats.diary_entries)}*\n"
        stats_text += f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: *{escape_md(stats.streak)}* –¥–Ω—è\\(–µ–π\\)\n\n"
        stats_text += f"üéØ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        
        for cat_code in ACTIVITY_CATEGORIES:
            count = stats.categories_done.get(cat_code, 0)
            emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
            cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
            stats_text += f"   {emoji} {escape_md(cat_name)}: *{escape_md(count)}*\n"

        stats_text += f"\nüìà –û–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫: *{escape_md(stats.tasks_done_total)}*"

        # Group stats button
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåç –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_group_stats")]
        ])

        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer(escape_md("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üôè"))

@dp.callback_query(F.data == "show_group_stats")
async def process_show_group_stats(callback_query: CallbackQuery):
    """Handle group stats callback."""
    try:
        stats = await StatsRepository.get_group_weekly_stats()
        
        response = f"üåç *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞ 7 –¥–Ω–µ–π:*\n\n"
        response += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: *{escape_md(stats.total_users_active)}*\n\n"
        response += f"üéØ *–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫:*\n"
        
        for cat_code in ACTIVITY_CATEGORIES:
            count = stats.categories_done.get(cat_code, 0)
            if count > 0:
                emoji = CATEGORY_EMOJI_MAP.get(cat_code, "‚ùì")
                cat_name = CATEGORY_NAMES_MAP.get(cat_code, cat_code)
                response += f"   {emoji} {escape_md(cat_name)}: *{escape_md(count)}*\n"

        response += f"\nüìà –û–±—â–µ–µ —á–∏—Å–ª–æ –ø—Ä–∞–∫—Ç–∏–∫: *{escape_md(stats.total_tasks_done)}*"

        await callback_query.message.answer(response)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error getting group stats: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

# Scheduler job
async def reset_daily_activities_job():
    """Reset daily activities job."""
    try:
        cutoff = (date.today() - timedelta(days=1)).isoformat()
        async with db_manager.get_cursor() as cursor:
            await cursor.execute(
                "DELETE FROM daily_activity WHERE activity_date < ?",
                (cutoff,)
            )
            await cursor.connection.commit()
        logger.info(f"Daily reset: deleted old activity records")
    except Exception as e:
        logger.error(f"Error in daily reset job: {e}")

# Main function
async def main():
    """Main function."""
    try:
        # Initialize database
        await db_manager.get_connection()
        logger.info("Database initialized")
        
        # Setup scheduler
        scheduler.add_job(reset_daily_activities_job, 'cron', hour=0, minute=5, timezone='UTC')
        scheduler.start()
        logger.info("Scheduler started")
        
        # Start bot
        logger.info("Starting bot polling...")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"Error in main: {e}")
    finally:
        await db_manager.close()
        if scheduler.running:
            scheduler.shutdown(wait=False)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped manually.")
    except Exception as e:
        logger.critical(f"Unhandled exception: {e}", exc_info=True)
